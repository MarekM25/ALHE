Potrzebne funkcje:

struct kola_zgaszenie
{
	bool zgaszone;
	Kolo kolo;
}

//A_star
//mamy kolejkê uporz¹dkowan¹ po fScore
//na pocz¹tku jest w niej tylko root i wszystkie s¹ zapalone
//pobieramy pierwszy element z kolejki (czyli najpierw root)
//sprawdzamy dla tego elementu, które mo¿emy zgasiæ pobieramy listê indeksów
//hScore to bêdzie iloœæ elementów listy indeksów
//dla tych co mo¿emy zgasiæ liczymy FScore
//wrzucamy je znowu do kolejki wed³ug FScore

//Warunek zakoñczenia: gdy na przodzie uporz¹dkowanej listy jest node, dla którego mo¿emy zgasiæ 0 nowych kamer lub lista pusta


struct node
{
	kolo_zgaszenie[] tablicaKolIZgaszen;
	int[] listaIndeksowKolKotreMozemyZgasic;
	int fScore;
	int hScore;
}


int hScore(kola_zgaszenie[] tablicaKolIZgaszen, int indexBadanegoKola)
{
	int hScore = 0;
	tablicaKolIZgaszen[indexBadanegoKola].zgaszone = tr;
	
	//iterujemy przez t¹ tablicê
	foreach (var koloZgaszenie in tablicaKolIZgaszen)
	{
		if (moznaZgasicKolo(tablicaKolZgoszen, koloZgaszenie.Index)
			++hScore;
	}
	return hScore;
}

List<int> listaIndeksowKtoreMoznaZgasic(kola_zgaszenie[] tablicaKolIZgaszen)
{
	List<int> listaIndeksow = new List<int>();
	foreach (var koloZgaszenie in tablicaKolIZgaszen)
	{
		if (moznaZgasicKolo(tablicaKolZgoszen, koloZgaszenie.Index)
			listaIndeksow.Add(koloZgaszenie.Index);
	}
	return listaIndeksow;
}

bool moznaZgasicKolo(kola_zgaszenie[] tablicaKolIZgaszen, int indexKolaKtoreSprawdzamyCzyMozemyZgasic)
{
	tablicaKolIZgaszen[indexKolaKtoreSprawdzamyCzyMozemyZgasic].zgaszone = false;
	return sprawdzCzyPokrytajestCalaGaleria(tablicaKolIZgaszen));
}

